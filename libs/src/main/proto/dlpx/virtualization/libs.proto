/*
 * Copyright (c) 2018, 2019 by Delphix. All rights reserved.
 */

syntax = "proto3";

import "dlpx/virtualization/common.proto";

option java_multiple_files = true;

package com.delphix.virtualization.libs;


message ActionableLibraryError {
    int32 id = 1;
    string message = 2;
}

message NonActionableLibraryError {
}

message LibraryErrorResult {
  oneof error {
    ActionableLibraryError actionable_error = 1;
    NonActionableLibraryError non_actionable_error = 2;
  }
}

message RunBashRequest {
  com.delphix.virtualization.common.RemoteConnection remote_connection = 1;
  string command = 2;
  map<string, string> variables = 3;
  bool use_login_shell = 4;
}

message RunBashResult {
  int32 exit_code = 1;
  string stdout = 2;
  string stderr = 3;
}

message RunBashResponse {
  oneof result {
    RunBashResult return_value = 1;
    LibraryErrorResult error = 2;
  }
}

message RunPowerShellRequest {
  com.delphix.virtualization.common.RemoteConnection remote_connection = 1;
  string command = 2;
  map<string, string> variables = 3;
}

message RunPowerShellResult {
  int32 exit_code = 1;
  string stdout = 2;
  string stderr = 3;
}

message RunPowerShellResponse {
  oneof result {
    RunPowerShellResult return_value = 1;
    LibraryErrorResult error = 2;
  }
}

message RunSyncRequest {
  com.delphix.virtualization.common.RemoteConnection remote_connection = 1;
  string source_directory = 2;
  string rsync_user = 3;
  repeated string exclude_paths = 4;
  repeated string sym_links_to_follow = 5;

}

message RunSyncResult { }

message RunSyncResponse {
  oneof result {
    RunSyncResult return_value = 1;
    LibraryErrorResult error = 2;
  }
}

message RunExpectRequest {
  com.delphix.virtualization.common.RemoteConnection remote_connection = 1;
  string command = 2;
  map<string, string> variables = 3;
}

message RunExpectResult { }

message RunExpectResponse {
  oneof result {
    RunExpectResult return_value = 1;
    LibraryErrorResult error = 2;
  }
}

message LogRequest {
  string message = 1;
  enum LogLevel {
    DEBUG = 0;
    INFO = 1;
    ERROR = 2;
  }
  LogLevel level = 2;
}

message LogResult { }

message LogResponse {
  oneof result {
    LogResult return_value = 1;
    LibraryErrorResult error = 2;
  }
}
