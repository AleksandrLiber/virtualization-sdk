/**
 * Copyright (c) 2019 by Delphix. All rights reserved.
 */

plugins {
  id "delphix.python"
}

def devVenvDir = project.layout.buildDirectory.file("test-venvs/python2.7")
def bootstrapVEnvBinary = project.layout.buildDirectory.file("pipsi/bin/virtualenv").get().asFile

/*
 * DEVELOPMENT TASKS
 */

def devPythonBinary = "${buildDir}/test-venvs/python2.7/bin/python"

def htmlReportDir = "${buildDir}/html-coverage"
def htmlReportFiles = fileTree(dir: htmlReportDir,
        includes: [
                "**/*.html",
                "**/*.js",
                "**/*.png",
                "**/*.json",
                "**/*.css",
        ])

/*
* A convience task that needs to pass for code to be checked in. 'coverage'
* runs the tests so it's not necessary to call 'test'.
*/
task precommit {
  dependsOn 'lint'
  dependsOn 'coverage'
  dependsOn 'format'
}

// A convience task that formats both source and test code.
task format() {
  dependsOn 'formatSrc'
  dependsOn 'formatTest'
  dependsOn 'sortSrcImports'
  dependsOn 'sortTestImports'
}

task coverage(type: Exec) {
  commandLine devPythonBinary, '-m', 'pytest', '--cov=src/main/python', "${projectDir}/src/test/python"

  environment([
          PYTHONPATH: "${projectDir}/src/main/python:${projectDir}/src/test/python",
  ])

  dependsOn "sync_python2.7"

  outputs.file("$buildDir/.coverage")
  outputs.upToDateWhen {false}
}

task runHtmlReport(type: Exec, dependsOn: 'coverage') {
  commandLine devPythonBinary, '-m', 'coverage', 'html', '--dir', "${buildDir}/html-coverage",
          '--include', "*/${project.name}/src/main/python/*"

  outputs.files(htmlReportFiles)
}

task lint() {
  dependsOn 'lintSrc'
  dependsOn 'lintTest'
}

task clearVEnv(type: Exec) {
  commandLine bootstrapVEnvBinary.path, devVenvDir.get().asFile.path, '--clear'

  dependsOn "sync_python2.7"
}

/*
* BUILD TASKS
*/

/*
 * HELPER TASKS
 *
 * This are just wrappers around Python commands and need to be moved into
 * a plugin.
 */

def pySrc = "${projectDir}/src/main/python"
def pyTestSrc = "${projectDir}/src/test/python"

task formatSrc(type: Exec) {
  commandLine devPythonBinary, '-m', 'yapf', '--recursive', '--in-place', pySrc

  dependsOn "sync_python2.7"
}

task formatTest(type: Exec) {
  commandLine devPythonBinary, '-m', 'yapf', '--recursive', '--in-place', pyTestSrc

  dependsOn "sync_python2.7"
}

task sortSrcImports(type: Exec) {
  commandLine devPythonBinary, '-m', 'isort', '-rc', pySrc

  dependsOn "sync_python2.7"
}

task sortTestImports(type: Exec) {
  commandLine devPythonBinary, '-m', 'isort', '-rc', pyTestSrc

  dependsOn "sync_python2.7"
}

task lintSrc(type: Exec) {
  commandLine devPythonBinary, '-m', 'flake8', pySrc

  dependsOn "sync_python2.7"
}

task lintTest(type: Exec) {
  commandLine devPythonBinary, '-m', 'flake8', pyTestSrc

  dependsOn "sync_python2.7"
}

dlpxPython {
  dist {
    name = "dlpx-virtualization-tools"
  }

  packages {
    click {}

    protobuf {
      version = "== 3.6.1"
    }

    pyyaml {
      version = ">= 3"
    }

    requests {
      version = ">= 2.21.0"
    }

    typing {
      markers = "python_version < '3.5'"
    }
  }

  devPackages {
    coverage {
      version = ">= 4.5"
    }

    flake8 {
      version = ">= 3.6"
    }

    httpretty {
      version = ">= 0.9.6"
    }

    isort {
      version = ">= 4.3"
    }

    mock {
      version = ">=2.0"
    }

    pytestCov {
      dist = "pytest-cov"
      version = ">= 2.6"
    }

    yapf {
      version = ">= 0.25"
    }
  }

  supportedPythons {
    "python2.7" {}
  }
}

task "testDelphixBin_python2.7"(type: Exec) {
  executable "${buildDir}/install-test-venvs/python2.7/bin/delphix"
  args "--help"

  dependsOn "testInstallation_python2.7"
}

// sdist and the python tests depend on the generated python libraries
// from the protoc plugin. Must manually specify as plugins are not aware
// of each other.
project.afterEvaluate {
  tasks["test"].dependsOn tasks["testDelphixBin_python2.7"]
}
