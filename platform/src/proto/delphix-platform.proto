/*
 * Copyright (c) 2018 by Delphix. All rights reserved.
 */

syntax = "proto3";

import "delphix.proto";

option java_multiple_files = true;

package com.delphix.virtualization.platform;

/* DISCOVERY */

message RepositoryDiscoveryInput {
  RemoteConnection sourceConnection = 1;
}

message RepositoryDiscoveryOutput {
  repeated PluginDefinedObject repositoryList = 1;
}

message SourceConfigDiscoveryInput {
  RemoteConnection sourceConnection = 1;
  Repository repository = 2;
}

message SourceConfigDiscoveryOutput {
  repeated PluginDefinedObject sourceConfigList = 1;
}

/* DIRECT LINKING */

message DirectPreSnapshotInput {
  DirectSource directSource = 1;
  Repository repository = 2;
  SourceConfig sourceConfig = 3;
}

message DirectPostSnapshotInput {
  DirectSource directSource = 1;
  Repository repository = 2;
  SourceConfig sourceConfig = 3;
}

/* STAGED LINKING */

message StagedPreSnapshotInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  StagedSource stagedSource = 3;
}

message StagedPostSnapshotInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  StagedSource stagedSource = 3;
}

message StagedResyncInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  StagedSource stagedSource = 3;
}

message StartStagingInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  StagedSource stagedSource = 3;
}

message StopStagingInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  StagedSource stagedSource = 3;
}

message StagedStatusInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  StagedSource stagedSource = 3;
}

message StagedStatusOutput {
  enum Status {
    ACTIVE = 0;
    INACTIVE = 1;
  }
  Status status = 1;
}

message StagedWorkerInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  StagedSource stagedSource = 3;
}

message StagedMountSpecInput {
  Repository repository = 1;
  StagedSource stagedSource = 2;
}

message StagedMountSpecOutput {
  string mountPath = 1;
  OwnershipSpec ownershipSpec = 2;
}

/* PROVISIONING */

message ConfigureInput {
  Repository repository = 1;
  Snapshot snapshot = 2;
  VirtualSource source = 3;
}

message ConfigureOutput {
  PluginDefinedObject sourceConfig = 1;
}

message UnconfigureInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  VirtualSource virtualSource = 3;
  bool deleteFlag = 4;
}

message ReconfigureInput {
  Snapshot snapshot = 1;
  SourceConfig sourceConfig = 2;
  VirtualSource virtualSource = 3;
}

message ReconfigureOutput {
  PluginDefinedObject sourceConfig = 1;
}

message StartInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  VirtualSource virtualSource = 3;
}

message StopInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  VirtualSource virtualSource = 3;
}

message VirtualPreSnapshotInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  VirtualSource virtualSource = 3;
}

message VirtualPostSnapshotInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  VirtualSource virtualSource = 3;
}

message VirtualPostSnapshotOutput {
  PluginDefinedObject snapshot = 1;
}

message VirtualStatusInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  VirtualSource virtualSource = 3;
}

message VirtualStatusOutput {
  enum Status {
    ACTIVE = 0;
    INACTIVE = 1;
  }
  Status status = 1;
}

message InitializeInput {
  Repository repository = 1;
  SourceConfig sourceConfig = 2;
  VirtualSource virtualSource = 3;
}

message VirtualMountSpecInput {
  Repository repository = 1;
  VirtualSource virtualSource = 2;
}

message VirtualMountSpecOutput {
  SingleMount primaryMount = 1;
  repeated SingleMount additionalMountList = 2;
  repeated OwnershipSpec ownershipSpecList = 3;
}

/* UPGRADE */

message UpgradeLinkedSourceInput {
  LinkedSource linkedSource = 1;
}

message UpgradeVirtualSourceInput {
  VirtualSource virtualSource = 1;
}

message UpgradeSourceConfig {
  SourceConfig sourceConfig = 1;
}

message UpgradeSnapshot {
  Snapshot snapshot = 1;
}
