/*
 * Copyright (c) 2018, 2019 by Delphix. All rights reserved.
 */

syntax = "proto3";

import "dlpx/virtualization/common.proto";

option java_multiple_files = true;

package com.delphix.virtualization.platform;

/* ERROR REPORTING */

/*
 * This indicates that a plugin elected not to handle an error raised by a callback.
 *  - error_id can be used to look up the original exception from the callback worker.
 *  - call_stack gives the location in Python code where the erroring callback was executed.
 */
message UnhandledCallbackError {
  uint32 error_id = 1;
  string call_stack = 2;
}

/* More error types will get inserted here in future */
message PluginErrorResult {
  oneof error {
    UnhandledCallbackError unhandled_callback_error = 1;
  }
}

/* DISCOVERY */

message RepositoryDiscoveryRequest {
  com.delphix.virtualization.common.RemoteConnection source_connection = 1;
}

message RepositoryDiscoveryResult {
  repeated com.delphix.virtualization.common.Repository repositories = 1;
}

message RepositoryDiscoveryResponse {
  oneof result {
    RepositoryDiscoveryResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message SourceConfigDiscoveryRequest {
  com.delphix.virtualization.common.RemoteConnection source_connection = 1;
  com.delphix.virtualization.common.Repository repository = 2;
}

message SourceConfigDiscoveryResult {
  repeated com.delphix.virtualization.common.SourceConfig source_configs = 1;
}

message SourceConfigDiscoveryResponse {
  oneof result {
    SourceConfigDiscoveryResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

/* DIRECT LINKING */

message DirectPreSnapshotRequest {
  com.delphix.virtualization.common.DirectSource direct_source = 1;
  com.delphix.virtualization.common.Repository repository = 2;
  com.delphix.virtualization.common.SourceConfig source_config = 3;
}

/*
 * Currently, pre snapshot does not expect a return value. However, defining
 * a valid return type as a placeholder and still return empty message helps
 * if something needs to be added as part of the result in future.
 */
message DirectPreSnapshotResult { }

message DirectPreSnapshotResponse {
  oneof result {
    DirectPreSnapshotResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message DirectPostSnapshotRequest {
  com.delphix.virtualization.common.DirectSource direct_source = 1;
  com.delphix.virtualization.common.Repository repository = 2;
  com.delphix.virtualization.common.SourceConfig source_config = 3;
}

message DirectPostSnapshotResult {
  com.delphix.virtualization.common.Snapshot snapshot = 1;
}

message DirectPostSnapshotResponse {
  oneof result {
    DirectPostSnapshotResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

/* STAGED LINKING */

message StagedPreSnapshotRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
  com.delphix.virtualization.common.RemoteConnection source_connection = 4;
}

message StagedPostSnapshotRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
  com.delphix.virtualization.common.RemoteConnection source_connection = 4;
}

message StagedResyncRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
  com.delphix.virtualization.common.RemoteConnection source_connection = 4;
}

message StartStagingRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
  com.delphix.virtualization.common.RemoteConnection source_connection = 4;
}

message StopStagingRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
  com.delphix.virtualization.common.RemoteConnection source_connection = 4;
}

message StagedStatusRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
  com.delphix.virtualization.common.RemoteConnection source_connection = 4;
}

message StagedStatusResult {
  enum Status {
    ACTIVE = 0;
    INACTIVE = 1;
  }
  Status status = 1;
}

message StagedWorkerRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.StagedSource staged_source = 3;
  com.delphix.virtualization.common.RemoteConnection source_connection = 4;
}

message StagedMountSpecRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.StagedSource staged_source = 2;
  com.delphix.virtualization.common.RemoteConnection source_connection = 4;
}

message StagedMountSpecResult {
  string mountPath = 1;
  com.delphix.virtualization.common.OwnershipSpec ownership_spec = 2;
}

/* PROVISIONING */

message ConfigureRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.Snapshot snapshot = 2;
  com.delphix.virtualization.common.VirtualSource source = 3;
}

message ConfigureResult {
  com.delphix.virtualization.common.SourceConfig source_config = 1;
}

message ConfigureResponse {
  oneof result {
    ConfigureResult return_value = 1;
    PluginErrorResult error = 2;
  }
}

message UnconfigureRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
  bool deleteFlag = 4;
}

message ReconfigureRequest {
  com.delphix.virtualization.common.Snapshot snapshot = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message ReconfigureResult {
  com.delphix.virtualization.common.SourceConfig source_config = 1;
}

message StartRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message StopRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message VirtualPreSnapshotRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message VirtualPostSnapshotRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message VirtualPostSnapshotResult {
  com.delphix.virtualization.common.Snapshot snapshot = 1;
}

message VirtualStatusRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message VirtualStatusResult {
  enum Status {
    ACTIVE = 0;
    INACTIVE = 1;
  }
  Status status = 1;
}

message InitializeRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.SourceConfig source_config = 2;
  com.delphix.virtualization.common.VirtualSource virtual_source = 3;
}

message VirtualMountSpecRequest {
  com.delphix.virtualization.common.Repository repository = 1;
  com.delphix.virtualization.common.VirtualSource virtual_source = 2;
}

message VirtualMountSpecResult {
  com.delphix.virtualization.common.SingleMount primary_mount = 1;
  repeated com.delphix.virtualization.common.SingleMount additional_mounts = 2;
  repeated com.delphix.virtualization.common.OwnershipSpec ownership_specs = 3;
}

/* UPGRADE */

message UpgradeLinkedSourceRequest {
  com.delphix.virtualization.common.LinkedSource linked_source = 1;
}

message UpgradeVirtualSourceRequest {
  com.delphix.virtualization.common.VirtualSource virtual_source = 1;
}

message UpgradeSourceConfigRequest {
  com.delphix.virtualization.common.SourceConfig source_config = 1;
}

message UpgradeSnapshotRequest {
  com.delphix.virtualization.common.Snapshot snapshot = 1;
}
